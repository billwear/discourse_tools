#!/usr/bin/python3
# dpub is a set of discourse publishing tools, using the discourse API
# try "dpub -h" for help and calling sequences
#
import subprocess, json, sys, getopt
from optparse import OptionParser
from yaml import load, dump
try:
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper

parser = OptionParser()
parser.add_option("-a", "--autoname", dest="autoname",
                  help="build filename from topic name+number (with -g; ignores -f)")
parser.add_option("-c", "--category", dest="category", 
                  help="only operate on topics in specifed category")
parser.add_option("-f", "--file", dest="filename",
                  help="file to read (-g) or write (-p, -c)", metavar="FILE")
parser.add_option("-g", "--get", action="store_true", dest="get", default=False,
                  help="read TOPIC into FILENAME; req -t & -f")
parser.add_option("-k", "--config", dest="config_file",
                  help="config file w/URL, api-key, username (default \"dpub.yaml\")")
parser.add_option("-j", "--json", dest="json_file",
                  help="write post json to JSON_FILE when using -g, before converting")
parser.add_option("-J", "--JSON", dest="topic_json_file",
                  help="write TOPIC json to TOPIC_JSON_FILE when using -g")
parser.add_option("-n", "--new", action="store_true", dest="new", default=False,
                  help="create new topic from filename")
parser.add_option("-p", "--put", action="store_true", dest="put", default=False,
                  help="write TOPIC from FILENAME into discourse; req -t & -f")
parser.add_option("-r", "--srange", dest="srange",
                  help="minimum topic number to read (with -g)")
parser.add_option("-R", "--erange", dest="erange",
                  help="minimum topic number to read (with -g)")
parser.add_option("-t", "--topic", dest="topic",
                  help="discourse topic to read or write (with -g or -p)")

(options,args) = parser.parse_args()

# autoname with filename
if((options.autoname and options.filename) or \
   (options.autoname and options.put) or \
   (options.autoname and options.get) or \
   (options.autoname and options.new) or \
   (options.get and options.put) or \
   (options.get and options.new) or \
   (options.new and options.put) or \
   (options.put and not options.topic ) or \
   (options.get and not (options.topic or (options.srange and options.erange))) or \
   (options.topic and (options.srange or options.erange)) or \
   ((options.erange and not options.srange) or (options.srange and not options.erange)) or \
   (options.put and not options.filename) or \
   ((options.put or options.new) and not options.filename ) or \
   (options.get and not (options.filename or options.autoname)) or \
   (not options.get and not options.put and not options.new) or \
   (options.put  and (options.srange or options.erange)) or \
   (options.new and (options.topic or options.srange or options.erange))):
    parser.print_help()
    sys.exit()

# read config file to get api-key, api-usr, and discourse url
if(options.config_file):
    config_file = options.config_file
else:
    config_file = "/etc/dc.yaml"
cfile = open("/etc/dc.yaml","r")
config_data = load(cfile, Loader=Loader)

# read the topic, which is required for both get and put
# note that discourse topic put doesn't work reliably at this time,
# so dpub gets the topic to get the post number, then reads or writes the post
if( options.get or options.put ):
    print("reading the topic")
    proc = subprocess.Popen([
        'curl',
        '-X',
        'GET',
        '-H',
        'Api-Key: ' + config_data['api_key'],
        '-H',
        'Api-Username: ' + config_data['api_username'],
        '-H',
        'Content-Type: application/json',
        config_data['base_url'] + '/t/{'+str(options.topic)+'}.json'],
        stdout=subprocess.PIPE
    )
    output = proc.stdout.read()
    topic_json = json.loads(output)
    post_id = topic_json['post_stream']['posts'][0]['id']
    # if user requested the intermediate topic json, write it to other spec'd filename
    if( options.topic_json_file ):
        f2 = open(options.topic_json_file, "w")
        f2.write(str(topic_json))
        f2.close()

# get post, convert it to markdown, and write it to the specified filename
if( options.get ):
    # read the post using the api
    proc2 = subprocess.Popen([
        'curl',
        '-X',
        'GET',
        '-H',
        'Api-Key: ' + config_data['api_key'],
        '-H',
        'Api-Username: ' + config_data['api_username'],
        '-H',
        'Content-Type: application/json',
        config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'],
        stdout=subprocess.PIPE
    )
    output2 = proc2.stdout.read()
    post_json = json.loads(output2)
    
    # if user requested the intermediate post json, write it to other spec'd filename
    if( options.json_file ):
        f2 = open(options.json_file, "w")
        f2.write(str(post_json))
        f2.close()

    # capture just the article text itself ('raw'), convert, & write to output file
    raw = post_json['raw']
    f = open(options.filename, "w")
    f.write(str(raw))

if( options.put ):
    # load and convert the specified markdown file
    f = open(options.filename, "r")
    markdown = f.read()
    # pad the markdown to 9000 chars to avoid discourse bug
    outstr = markdown.ljust(9000)
    data = {}
    # place the markdown in the json "raw" location, covert, and write to json file
    data["raw"] = outstr
    f = open("foo.json", "w")
    f.write(json.dumps(data))

    # upload the json to discourse, replacing whatever was at post_id
    url = config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'
    apikey = 'Api-Key: ' + config_data['api_key']
    apiusername = 'Api-Username: ' + config_data['api_username']
    response = subprocess.check_output([
        'curl',
        '-X',
        'PUT',
        url,
        '-H',
        apikey,
        '-H',
        apiusername,
        '-H',
        'Content-Type: application/json',
        '-d',
        '@foo.json']
    )








