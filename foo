#!/usr/bin/python3

import argparse
import sys, subprocess, json, os, time
from yaml import load, dump      
try:                             
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper

from menutree import setmenu

def push_discourse():
    print("push discourse")

def push_github():
    if(args.gitpushall == True):
        response = subprocess.check_output([
            'git',
            'add',
            '.']
        )
        try:
            response = subprocess.check_output([
                'git',
                'commit',
                '-m',
                'bot-push']
            )
        except:
            print("up to date")
            sys.exit()
        response = subprocess.check_output([
            'git',
            'push']
        )            
    else:
        filename = str(args.gitpushfile[0])
        response = subprocess.check_output([
            'git',
            'add',
            filename]
        )
        try:
            response = subprocess.check_output([
                'git',
                'commit',
                '-m',
                'bot-push']
            )
        except:
            print("up to date")
            sys.exit()
            
        response = subprocess.check_output([
            'git',
            'push']
        )

def pull_discourse():
    if(args.discpullall == True):
        try:
            config = str(args.discpullconfig[0])
        except:
            config = "/etc/dc.yaml"
            
            # read config file to get api-key, api-usr, and discourse url
            cfile = open("/etc/dc.yaml","r")
            config_data = load(cfile, Loader=Loader)
            cfile.close();
        
            # giant for loop to get the topic range specified
            for tn in range( 1, 1700 ):
            
                # sleep for 2.5 seconds - prevents discourse DDOS rejection
                time.sleep(2.5)
                
                # run the shell command to get the topic and retain the result
                proc = subprocess.Popen([
                    'curl',
                    '-X',
                    'GET',
                    '-H',
                    'Api-Key: ' + config_data['api_key'],
                    '-H',
                    'Api-Username: ' + config_data['api_username'],
                    '-H',
                    'Content-Type: application/json',
                    config_data['base_url'] + '/t/{'+str(tn)+'}.json'],
                                        stdout=subprocess.PIPE
                )
                
                # read the result into a usable buffer
                output = proc.stdout.read()
                
                # debug output: what topic were you pulling?
                print("topic = " + str(tn))
                
                # convert the result to json
                try:
                    topic_json = json.loads(output)
                except:
                    continue
            
                # extract the post ID from the topic json
                post_id = topic_json['post_stream']['posts'][0]['id']
                category_id = topic_json['category_id']
                if(args.discpullcat):
                    if((category_id is None)
                       or (int(arg.discpullcat) != int(category_id))):
                        continue
                    autoname = topic_json['post_stream']['posts'][0]['topic_slug'] + \
                        '-' + str(tn) + '.md'
                    deleted_at = topic_json['deleted_at']
                    if(deleted_at):
                        print("post deleted: not pulled from discourse")
                        continue
                    outfile_name = autoname;
                
                    # read the post using the api, retaining the return value
                    proc2 = subprocess.Popen([
                        'curl',
                        '-X',
                        'GET',
                        '-H',
                        'Api-Key: ' + config_data['api_key'],
                        '-H',
                        'Api-Username: ' + config_data['api_username'],
                        '-H',
                        'Content-Type: application/json',
                        config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'],
                                             stdout=subprocess.PIPE
                    )
                    
                    # copy the return value to a suitable buffer
                    output2 = proc2.stdout.read()
                
                    # convert the returned post to json
                    post_json = json.loads(output2)
                
                    # extract the article markdown from the json output
                    raw = post_json['raw']
                
                    # write the article markdown to the specified filename
                    f = open(outfile_name, "w")
                    f.write(str(raw))
                    f.close()
                
                # exit now, as this run is finished
                sys.exit(0)
        else:
            filename = str(args.discpullfile[0])
            topic = args.discpulltopic[0]
            try:
                config = str(args.discpullconfig[0])
            except:
                config = "/etc/dc.yaml"

            # read config file to get api-key, api-usr, and discourse url
            cfile = open("/etc/dc.yaml","r")
            config_data = load(cfile, Loader=Loader)
            cfile.close();

            # run the shell command to get the topic and retain the result
            proc = subprocess.Popen([
                'curl',
                '-X',
                'GET',
                '-H',
                'Api-Key: ' + config_data['api_key'],
                '-H',
                'Api-Username: ' + config_data['api_username'],
                '-H',
                'Content-Type: application/json',
                config_data['base_url'] + '/t/{'+str(topic)+'}.json'],
                                    stdout=subprocess.PIPE
            )

            # read the result into a usable buffer
            output = proc.stdout.read()

            # convert the result to json
            try:
                topic_json = json.loads(output)
            except:
                print("topic " + str(topic) + " doesn't exist; exiting")
                sys.exit(4)


            # extract the post ID from the topic json
            post_id = topic_json['post_stream']['posts'][0]['id']
            category_id = topic_json['category_id']
            deleted_at = topic_json['deleted_at']
            if(deleted_at):
                print("post deleted: not pulled from discourse")
                sys.exit()
                
            autoname = topic_json['post_stream']['posts'][0]['topic_slug'] + \
                '-' + str(topic) + '.md'
            
            # compute the output filename
            # if(options.autoname):
            #     outfile_name = autoname;
            # else:
            #     outfile_name = options.filename
            outfile_name = filename
            
            # if user requested the intermediate topic json, specified filename
            if(args.disctopicjson):
                f2 = open("topic.json", "w")
                f2.write(str(topic_json))
                f2.close()

            # read the post using the api, retaining the return value
            proc2 = subprocess.Popen([
                'curl',
                '-X',
                'GET',
                '-H',
                'Api-Key: ' + config_data['api_key'],
                '-H',
                'Api-Username: ' + config_data['api_username'],
                '-H',
                'Content-Type: application/json',
                config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'],
                                     stdout=subprocess.PIPE
            )
            
            # copy the return value to a suitable buffer
            output2 = proc2.stdout.read()
            
            # convert the returned post to json
            post_json = json.loads(output2)
            
            # if user req intermediate post json, write it to the specified filename
            if( args.discpostjson ):
                f2 = open("post.json", "w")
                f2.write(str(post_json))
                f2.close()
                
            # extract the article markdown from the json output
            raw = post_json['raw']
            
            # write the article markdown to the specified filename
            f = open(outfile_name, "w")
            f.write(str(raw))
            f.close()


def pull_github():
    fileflag = args.gitall
    if(fileflag == True):
        response = subprocess.check_output([
            'git',
            'fetch']
        )
        response = subprocess.check_output([
            'git',
            'checkout',
            'origin/master',
            '--',
            '.']
        )
    else:
        filename = str(args.gitfile[0])
        response = subprocess.check_output([
            'git',
            'fetch']
        )
        response = subprocess.check_output([
            'git',
            'checkout',
            'origin/master',
            '--',
            filename]
        )

parser = setmenu()
args = parser.parse_args()

if(args.l1 == "push"):
    if(args.push_l2 == "discourse"):
        push_discourse()
    elif(args.push_l2 == "github"):
        push_github()
elif(args.l1 == "pull"):
    if(args.pull_l2 == "discourse"):
        pull_discourse()
    elif(args.pull_l2 == "github"):
        pull_github()
            
