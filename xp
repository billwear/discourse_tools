#!/usr/bin/python3
# xpub disc:maas-doc-25.dmd maas-doc-25.dmd
# xpub maas-doc-25.dmd disc:maas-doc-25.dmd
# xpub * git:repo.git
# xpub git:repo.git *
# xpub maas-doc-25.dmd maas-doc-25.html
# xpub maas-doc-25.dmd .html
# xpub maas-doc-25.html .dmd
# xpub *.dmd *.html
# xpub *.dmd *.html tag1 tag2 tag3
# xpub *.dmd *.dmd tag1 tag2 tag3
# xpub *.dmd newdir/*.dmd tag1 tag2 tag3
# xpub https://discourse.maas.io/* . -c 5
# xpub https://github.com/billwear/* .
import sys, subprocess, json, os, time, re, markdown, jinja2
from yaml import load, dump

try:
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper

import click, sys


@click.command()
@click.option(
    "-x", "xflag", help="flag for transforms that require it (varies by xform)."
)
@click.option("-a", "auth", help="path to auth info, if needed.")
@click.option("-o", "output", help="output pattern, in quotes.")
@click.option("-t", "tags", help="tags to tailor files in transformation.")
@click.argument("infile", nargs=-1)
def cli(infile, output, xflag, tags, auth):
    """xpub: transfer files, transforming them as necessary

    \b
    xpub reads INFILE using standard domain:filename parsing:
        - https://discourse.mydomain.com:/*
        - https://github.com/mylogin/mygitrepo:/zulu.cpp
        - ./*machines*.dmd
        - ~/some/other/accessible/directory/*.md
        - ...etc.

    \b
    xpub publishes to "output" transforming file if necessary:
        - "html" writes HTML to stdout
        - "somefile.html" writes HTML to ./somefile.html
        - "../otherdir/*.dmd" creates ../otherdir if needed and writes 
          discourse markup to <filename(s)>.dmd in ../otherdir
        - "https://discourse.mydomain.com:*.dmd" publishes discourse markup
          to your forum if it can glean auth, topic, and category info
        - ...etc.
 
    xpub will pretty much do its best to figure out what you're trying to do,
    and then do it, if it can. See the manpage or github README for details.
    """

    outfile = ""
    # read infile(s)
    for x in infile:

        # decide what needs doing
        if output == None:
            outfile = sys.stdout
        elif "github.com" in output:
            response = subprocess.check_output(["git", "add", x])
            outfile = "github"
        elif output == ".html" or output == "html":
            if "htm" not in os.path.splitext(os.path.basename(x))[1]:
                if os.path.splitext(os.path.basename(x))[1] == ".md":
                    f = open(x, "r")
                    extensions = {"extra", "smarty"}
                    html = markdown.markdown(
                        f.read(), extensions=extensions, output_format="html5"
                    )
                outfile = sys.stdout
                TEMPLATE = """<!DOCTYPE html>
                <html>
                <body>
                <div class="container">
                {{content}}
                </div>
                </body>
                </html>
                """
                buffer = jinja2.Template(TEMPLATE).render(content=html)
            else:
                pass

        # do it
    #        ifile = open(x, "r")
    #        buffer = ifile.read()

    # output segment
    if outfile == sys.stdout:
        print(buffer, file=outfile)
    elif outfile == "github":
        response = subprocess.check_output(["git", "add", x])
        try:
            response = subprocess.check_output(["git", "commit", "-m", "bot-push"])
        except:
            print("up to date")
            sys.exit()
        response = subprocess.check_output(["git", "push"])
        sys.exit()


if __name__ == "__main__":
    cli()
