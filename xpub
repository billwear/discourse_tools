#!/usr/bin/python3

import sys, subprocess, json, os, time, re, markdown, jinja2
from yaml import load, dump      
try:                             
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper

def convert():
    print("xpub convert (markdown | discourse)")

def convert_discourse():
    print("xpub convert discourse (html | bulk)")
    
def convert_discourse_help():
    print("xpub convert discourse (html | bulk)")
    print(" - converts discourse markdown to another format")
    
def convert_markdown():
    print("xpub convert markdown (html)")

def convert_markdown_help():
    print("xpub convert markdown (html)")
    print(" - converts daring fireball markdown to another format")

def convert_discourse_bulk():
    if(len(sys.argv) < 5):
        print('xpub convert discourse bulk (html)')
    elif(sys.argv[4] == "help"):
        print('xpub convert discourse bulk (html)')
        print(" - converts all .md files in cwd to .<fmt> using same filename")
        print(" - e.g., my-file-item-705.md >> my-file-item-705.html")
    elif(sys.argv[4] == "html"):
        for mdfilename in os.listdir("."):
            if(mdfilename.endswith(".md")):
                basename = str(os.path.splitext(mdfilename)[0])
                page_title = basename
                page_title = page_title.replace("maas","MAAS")
                page_title = page_title.replace("api","API")
                page_title = page_title.replace("dhcp","DHCP")
                page_title = page_title.replace("stp","STP")
                page_title = page_title.replace("ntp","NTP")
                page_title = page_title.replace("cli","CLI")
                page_title = page_title.replace("vmfs","VMFS")
                page_title = page_title.replace("vm","VM")
                page_title = page_title.replace("CLIent","client")
                page_title = page_title.replace("tls","TLS")
                page_title = page_title.rstrip("-0123456789")
                page_title = page_title.replace("-"," ")
                page_title = page_title[0].upper() + page_title[1:]
                html_filename = basename + ".html"
                mdf = open(mdfilename, "r")
                md = mdf.read()

                # correct majority of the links
                cmd2 = re.sub(r"https://discourse.maas.io/t", "/t", md)
                cmd1 = re.sub(r"/t/([a-z0-9-]*)/([0-9]*)#", r"\1-\2.html#", cmd2)
                cmd = re.sub(r"/t/([a-z0-9-]*)/([0-9]*)", r"\1-\2.html", cmd1)
        
                # convert the corrected markdown to html
                extensions = {'extra','smarty'}
                html = markdown.markdown(cmd, extensions=extensions,
                                         output_format='html5')
                html = "<h1>" + page_title + "</h1>" + html
                htmlf = open(html_filename, "w")
                try:
                    template_file = open("template.html", "r")
                    TEMPLATE = template_file.read()
                except:
                    TEMPLATE = """<!DOCTYPE html>
                    <html>
                    <body>
                    <div class="container">
                    {{content}}
                    </div>
                    </body>
                    </html>
                    """

                doc = jinja2.Template(TEMPLATE).render(content=html)
                htmlf.write(doc)        

def convert_discourse_html():
    if(len(sys.argv) < 5):
        print('xpub convert discourse html "<basefilename>"')
    elif(sys.argv[4] == "help"):
        print('xpub convert discourse html "<basefilename>"')
        print(" - converts discourse markdown to html")
        print(" - corrects discourse links to html hrefs")
        print(" - enter the base markdown filename (w/o extension)")
        print("   (xpub assumes .md extension on the markdown)")
    else:
        # read the markdown
        md_filename = str(sys.argv[4]) + ".md"
        html_filename = str(sys.argv[4]) + ".html"
        mdf = open(md_filename, "r")
        md = mdf.read()

        # correct majority of the links
        cmd2 = re.sub(r"https://discourse.maas.io/t", "/t", md)
        cmd1 = re.sub(r"/t/([a-z0-9-]*)/([0-9]*)#", r"\1-\2.html#", cmd2)
        cmd = re.sub(r"/t/([a-z0-9-]*)/([0-9]*)", r"\1-\2.html", cmd1)
        
        # convert the corrected markdown to html
        extensions = {'extra','smarty'}
        html = markdown.markdown(cmd, extensions=extensions, output_format='html5')
        htmlf = open(html_filename, "w")
        doc = jinja2.Template(TEMPLATE).render(content=html)
        htmlf.write(doc)        
        
def convert_markdown_html():
    if(len(sys.argv) < 5):
        print('xpub convert markdown html "<basefilename>"')
    elif(sys.argv[4] == "help"):
        print('xpub convert markdown html "<basefilename>"')
        print(" - converts daring fireball markdown to html")
        print(" - enter the base markdown filename (w/o extension)")
        print("   (xpub assumes .md extension on the markdown)")
    else:
        md_filename = str(sys.argv[4]) + ".md"
        html_filename = str(sys.argv[4]) + ".html"
        mdf = open(md_filename, "r")
        md = mdf.read()
        extensions = {'extra','smarty'}
        html = markdown.markdown(md, extensions=extensions, output_format='html5')
        htmlf = open(html_filename, "w")
        doc = jinja2.Template(TEMPLATE).render(content=html)
        htmlf.write(doc)

def push():
    print("xpub push (discourse | github)")

def push_help():
    print("xpub push (discourse | github)")
    print(" - pushes files to destination")

def push_discourse():
    print("xpub push discourse (topic | new | tagged | all | bulktag)")

def push_discourse_help():
    print("xpub push disxcourse (topic | new | tagged | all | bulktag)")
    print(" - pushes discourse markdown via discourse API")
    print(" - API parameters specified in dc.yaml file (see xpub github)")
    print(' - "topic" pushes a specific topic number')
    print(' - "new" creates a new topic')
    print(' - "tagged" selectively pushes to a topic number based on tags')
    print(' - "all" pushes all files, using filename to get topic number')
    print('    **NOTE** this option is immediate and expects filenames')
    print('    in the format <title-slug>-topicnumber.md')
    print(' - "bulktag" is like "tagged," but pushes multiple files')
    print('    (also expects filenames like <title-slug>-topicnumber.md')

def push_github():
    print("xpub push github (all | file)")
    print(' - pushes entire github repo ("all") or specific file ("file")')
    print(" - must operate in remote .git repo on local disk")

def pull():
    print("xpub pull (discourse | github)")

def pull_help():
    print("xpub pull (discourse | github)")
    print(" - pulls files from source")

def pull_discourse():
    print("xpub pull discourse (topic | range | category)")

def pull_discourse_help():
    print("xpub pull discourse (topic | range | category)")
    print(" - pulls files from discourse")
    print(' - "topic" pulls a specific topic number')
    print(' - "range" pulls a range of topics between two numbers')
    print(' - "category" pulls a range of topics from a specific category')

def pull_github():
    print("xpub pull github (all | file)")

def xpub():
    print("xpub (pull | push | convert)")

def push_discourse_tagged():
    if(len(sys.argv) < 8):
        print('xpub push discourse tagged topic <number> "<filename>" <tag> <tag> <tag>...')
    else: 
        topic = sys.argv[5]
        filename = sys.argv[6]
        tags = []
        for x in range(7, len(sys.argv)):
            tags.append(str(sys.argv[x]))
        
        # read config file to get api-key, api-usr, and discourse url
        try:
            cfile = open("/etc/dc.yaml","r")
        except:
            print('xpub: unable to find config file "/etc/dc.yaml"')
            print('xpub: exiting')
            sys.exit(4)
        config_data = load(cfile, Loader=Loader)
        cfile.close();
        
        # run the shell command to get the topic and retain the result
        proc = subprocess.Popen([
            'curl',
            '-X',
            'GET',
            '-H',
            'Api-Key: ' + config_data['api_key'],
            '-H',
            'Api-Username: ' + config_data['api_username'],
            '-H',
            'Content-Type: application/json',
            config_data['base_url'] + '/t/{'+str(topic)+'}.json'],
                                stdout=subprocess.PIPE
        )

        # read the result into a usable buffer
        output = proc.stdout.read()

        # convert the result to json
        try:
            topic_json = json.loads(output)
        except:
            print("topic " + str(topic) + " doesn't exist; exiting")
            sys.exit(4)

        # extract the post ID from the topic json
        post_id = topic_json['post_stream']['posts'][0]['id']
        category_id = topic_json['category_id']
        deleted_at = topic_json['deleted_at']
        if(deleted_at):
            print("post deleted: not pushed from discourse")
            sys.exit()

        # switch in conditional sections based on tags
        if(tags):
            condfile = "cond_"+filename
            tag_count = len(tags)
            for x in range(tag_count):
                grepcli = 'grep -v "<!--[ ]*' + str(tags[x]) + '" '
                grepcli += filename + ' | grep -v '
                grepcli += '"' + str(tags[x]) + '[ ]*-->" >'
                grepcli += condfile
                os.system(grepcli)
                cpcli = "cp " + condfile + " tmp.md"
                os.system(cpcli)
                filename = "tmp.md"
                
            os.system("rm " + condfile)
            
        # load and convert the specified markdown file
        f = open(filename, "r")
        markdown = f.read()
        f.close()
        os.system("rm " + filename)

        # pad the markdown to 9000 chars to avoid discourse bug
        outstr = markdown.ljust(9000)
        
        # create a dictionary buffer for the markdown
        data = {}
        
        # place the markdown against a key called "raw" (the json key reqd by discourse)
        data["raw"] = outstr
        
        # open a temporary json file to store the markdown as json
        f = open("foo.json", "w")
        
        # convert the markdown to json and store it in the temp file
        f.write(json.dumps(data))
        
        # close the temp file for completeness
        f.close()
        
        # set the url and auth data as read from the yaml config file
        url = config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'
        apikey = 'Api-Key: ' + config_data['api_key']
        apiusername = 'Api-Username: ' + config_data['api_username']
    
        # use the curl command to re-post the markdown into discourse
        response = subprocess.check_output([
            'curl',
            '-X',
            'PUT',
            url,
            '-H',
            apikey,
            '-H',
            apiusername,
            '-H',
            'Content-Type: application/json',
            '-d',
            '@foo.json']
        )

        # remove the temporary json file
        os.remove("foo.json")

def push_discourse_topic():
    if(len(sys.argv) < 6):
        print('xpub push discourse topic <number> "<filename>"')
    else: 
        topic = sys.argv[4]
        filename = sys.argv[5]
        
        # read config file to get api-key, api-usr, and discourse url
        try:
            cfile = open("/etc/dc.yaml","r")
        except:
            print('xpub: unable to find config file "/etc/dc.yaml"')
            print('xpub: exiting')
            sys.exit(4)
        config_data = load(cfile, Loader=Loader)
        cfile.close();
        
        # run the shell command to get the topic and retain the result
        proc = subprocess.Popen([
            'curl',
            '-X',
            'GET',
            '-H',
            'Api-Key: ' + config_data['api_key'],
            '-H',
            'Api-Username: ' + config_data['api_username'],
            '-H',
            'Content-Type: application/json',
            config_data['base_url'] + '/t/{'+str(topic)+'}.json'],
                                stdout=subprocess.PIPE
        )

        # read the result into a usable buffer
        output = proc.stdout.read()

        # convert the result to json
        try:
            topic_json = json.loads(output)
        except:
            print("topic " + str(topic) + " doesn't exist; exiting")
            sys.exit(4)

        # extract the post ID from the topic json
        post_id = topic_json['post_stream']['posts'][0]['id']
        category_id = topic_json['category_id']
        deleted_at = topic_json['deleted_at']
        if(deleted_at):
            print("post deleted: not pushed from discourse")
            sys.exit()

        # load and convert the specified markdown file
        f = open(filename, "r")
        markdown = f.read()

        # pad the markdown to 9000 chars to avoid discourse bug
        outstr = markdown.ljust(9000)
        
        # create a dictionary buffer for the markdown
        data = {}
        
        # place the markdown against a key called "raw" (the json key reqd by discourse)
        data["raw"] = outstr
        
        # open a temporary json file to store the markdown as json
        f = open("foo.json", "w")
        
        # convert the markdown to json and store it in the temp file
        f.write(json.dumps(data))
        
        # close the temp file for completeness
        f.close()
        
        # set the url and auth data as read from the yaml config file
        url = config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'
        apikey = 'Api-Key: ' + config_data['api_key']
        apiusername = 'Api-Username: ' + config_data['api_username']
    
        # use the curl command to re-post the markdown into discourse
        response = subprocess.check_output([
            'curl',
            '-X',
            'PUT',
            url,
            '-H',
            apikey,
            '-H',
            apiusername,
            '-H',
            'Content-Type: application/json',
            '-d',
            '@foo.json']
        )

        # remove the temporary json file
        os.remove("foo.json")

def push_discourse_new():
    if(len(sys.argv) < 5):
        print('xpub push discourse new category <number> "<title>" "<filename>"')
    elif(sys.argv[4] == "help"):
        print('xpub push discourse new category <number> "<title>" "<filename>"')
        print(' - new discourse posts must have a category number and title')
        print(" - enter title in parentheses")
        print(" - filename can be anything, but file must be discourse markdown format")
    elif(len(sys.argv) < 8):
        print('xpub push discourse new category <number> "<title>" "<filename>"')
    else:

        filename = str(sys.argv[7])
        title = str(sys.argv[6])
        categoryid = int(sys.argv[5])

        # read config file to get api-key, api-usr, and discourse url
        try:
            cfile = open("/etc/dc.yaml","r")
        except:
            print('xpub: cannot open "/etc/dc.yaml"')
            print('xpub: exiting')
            sys.exit(4)
            
        config_data = load(cfile, Loader=Loader)
        cfile.close();

        # load and convert the specified markdown file
        f = open(filename, "r")
        markdown = f.read()
                
        # pad the markdown to 9000 chars to avoid discourse bug
        outstr = markdown.ljust(9000)
        
        # create a dictionary buffer for the markdown
        data = {}
        
        # place the markdown in the appropriate json keys
        data["title"] = title
        data["category"] = categoryid
        data["raw"] = outstr
        
        # open a temporary json file to store the markdown as json
        f = open("foo.json", "w")
        
        # convert the markdown to json and store it in the temp file
        f.write(json.dumps(data))
        
        # close the temp file for completeness
        f.close()
        
        # set the url and auth data as read from the yaml config file
        url = config_data['base_url'] + '/posts.json'
        apikey = 'Api-Key: ' + config_data['api_key']
        apiusername = 'Api-Username: ' + config_data['api_username']
    
        # use the curl command to re-post the markdown into discourse
        response = subprocess.check_output([
            'curl',
            '-X',
            'POST',
            url,
            '-H',
            apikey,
            '-H',
            apiusername,
            '-H',
            'Content-Type: application/json',
            '-d',
            '@foo.json']
        )

        # remove the temporary files
        os.remove("foo.json")

def push_github_all():
    if(len(sys.argv) > 4):
        if(sys.argv[4] == "help"):
            print('push github all')
            print(' - immediately pushes all files to github repo')
            print(' - must be in local github repo to work')
            sys.exit()
        else:
            print('"push github all" takes no options: try again')
            sys.exit()
            
    print("this will immediately push the entire repo to github")
    value = input("is this what you intended? (y/n) ")
    if(value != "y"):
        sys.exit()

    response = subprocess.check_output([
        'git',
        'add',
        '.']
    )
    try:
        response = subprocess.check_output([
            'git',
            'commit',
            '-m',
            'bot-push']
        )
    except:
        print("up to date")
        sys.exit()
    response = subprocess.check_output([
        'git',
        'push']
    )            

def pull_discourse_range():
    if(len(sys.argv) < 5):
        print("xpub pull discourse range <low> <high>")
    elif(sys.argv[4] == "help"):
        print("xpub pull discourse range <low> <high>")
        print(" - pulls a consecutive range of topics")
        print(' - output file names like "<topic-slug>-topicnum.md"')
    elif(len(sys.argv) < 6):
        print("xpub pull discourse range <low> <high>")        
    else:
        start = int(sys.argv[4])
        end = int(sys.argv[5])
        
        # read config file to get api-key, api-usr, and discourse url
        try:
            cfile = open("/etc/dc.yaml","r")
        except:
            print('xpub: unable to find config file "/etc/dc.yaml"')
            print('xpub: exiting')
            sys.exit(4)
        config_data = load(cfile, Loader=Loader)
        cfile.close();
        
        # giant for loop to get the topic range specified
        for tn in range( start, end+1 ):
            
            # sleep for 2.5 seconds - prevents discourse DDOS rejection
            time.sleep(2.5)
            
            # run the shell command to get the topic and retain the result
            proc = subprocess.Popen([
                'curl',
                '-X',
                'GET',
                '-H',
                'Api-Key: ' + config_data['api_key'],
                '-H',
                'Api-Username: ' + config_data['api_username'],
                '-H',
                'Content-Type: application/json',
                config_data['base_url'] + '/t/{'+str(tn)+'}.json'],
                                    stdout=subprocess.PIPE
            )
            
            # read the result into a usable buffer
            output = proc.stdout.read()
            
            # debug output: what topic were you pulling?
            print("topic = " + str(tn))
                
            # convert the result to json
            try:
                topic_json = json.loads(output)
            except:
                continue
            
            # extract the post ID from the topic json
            post_id = topic_json['post_stream']['posts'][0]['id']
            autoname = topic_json['post_stream']['posts'][0]['topic_slug'] + \
                '-' + str(tn) + '.md'
            deleted_at = topic_json['deleted_at']
            if(deleted_at):
                print("post deleted: not pulled from discourse")
                continue
                
            # read the post using the api, retaining the return value
            proc2 = subprocess.Popen([
                'curl',
                '-X',
                'GET',
                '-H',
                'Api-Key: ' + config_data['api_key'],
                '-H',
                'Api-Username: ' + config_data['api_username'],
                '-H',
                'Content-Type: application/json',
                config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'],
                                     stdout=subprocess.PIPE
            )
                
            # copy the return value to a suitable buffer
            output2 = proc2.stdout.read()
            
            # convert the returned post to json
            post_json = json.loads(output2)

            # extract the article markdown from the json output
            raw = post_json['raw']
            
            # write the article markdown to the specified file
            f = open(autoname, "w")
            f.write(str(raw))
            f.close()
                
        # exit now, as this run is finished
        sys.exit(0)
        
def push_github_file():
    if(len(sys.argv) < 5):
        print('xpub push github file "<filename>"')
    elif(sys.argv[4] == "help"):
        print('xpub push github file "<filename>"')
        print(' - push single file to github repo')
        print(' - must be in local github repo to work')
    else:
        filename = str(sys.argv[4])
        response = subprocess.check_output([
            'git',
            'add',
            filename]
        )
        try:
            response = subprocess.check_output([
                'git',
                'commit',
                '-m',
                'bot-push']
            )
        except:
            print("up to date")
            sys.exit()

        response = subprocess.check_output([
            'git',
            'push']
        )

def pull_discourse_category():
    if(len(sys.argv) < 5):
        print("xpub pull discourse category <number> range <low> <high>")
    elif(sys.argv[4] == "help"):
        print("xpub pull discourse category <number> range <low> <high>")
        print(' - category number = discourse "category_id" json element')
        print(' - range takes two topic numbers (low to high)')
        print(' - this call pulls consecutive topics matching the category')
    elif(len(sys.argv) < 8):
        print("xpub pull discourse category <number> range <low> <high>")
    else:
        start = int(sys.argv[6])
        end = int(sys.argv[7])
        categoryid = int(sys.argv[4])
        
        # read config file to get api-key, api-usr, and discourse url
        try:
            cfile = open("/etc/dc.yaml","r")
        except:
            print('xpub: unable to find config file "/etc/dc.yaml"')
            print('xpub: exiting')
            sys.exit(4)
        config_data = load(cfile, Loader=Loader)
        cfile.close();
        
        # giant for loop to get the topic range specified
        for tn in range( start, end+1 ):
            
            # sleep for 2.5 seconds - prevents discourse DDOS rejection
            time.sleep(2.5)
            
            # run the shell command to get the topic and retain the result
            proc = subprocess.Popen([
                'curl',
                '-X',
                'GET',
                '-H',
                'Api-Key: ' + config_data['api_key'],
                '-H',
                'Api-Username: ' + config_data['api_username'],
                '-H',
                'Content-Type: application/json',
                config_data['base_url'] + '/t/{'+str(tn)+'}.json'],
                                    stdout=subprocess.PIPE
            )
            
            # read the result into a usable buffer
            output = proc.stdout.read()
            
            # debug output: what topic were you pulling?
            print("topic = " + str(tn))
                
            # convert the result to json
            try:
                topic_json = json.loads(output)
            except:
                continue
            
            # extract the post ID from the topic json
            post_id = topic_json['post_stream']['posts'][0]['id']
            category_id = topic_json['category_id']
            if((category_id is None) or (categoryid != int(category_id))):
               continue
            autoname = topic_json['post_stream']['posts'][0]['topic_slug'] + \
                '-' + str(tn) + '.md'
            deleted_at = topic_json['deleted_at']
            if(deleted_at):
                print("post deleted: not pulled from discourse")
                continue
                
            # read the post using the api, retaining the return value
            proc2 = subprocess.Popen([
                'curl',
                '-X',
                'GET',
                '-H',
                'Api-Key: ' + config_data['api_key'],
                '-H',
                'Api-Username: ' + config_data['api_username'],
                '-H',
                'Content-Type: application/json',
                config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'],
                                     stdout=subprocess.PIPE
            )
                
            # copy the return value to a suitable buffer
            output2 = proc2.stdout.read()
            
            # convert the returned post to json
            post_json = json.loads(output2)

            # extract the article markdown from the json output
            raw = post_json['raw']
            
            # write the article markdown to the specified file
            f = open(autoname, "w")
            f.write(str(raw))
            f.close()
                
        # exit now, as this run is finished
        sys.exit(0)

def pull_discourse_topic():
    if(len(sys.argv) < 5):
        print('xpub pull discourse topic <number> "<filename>"')
    elif(sys.argv[4] == "help"):
        print('xpub pull discourse topic <number> "<filename>"')
        print(' - "<filename>" can be named whatever you want')
    elif(len(sys.argv) < 6):
        print('xpub pull discourse topic <number> "<filename>"')        
    else:
        filename = str(sys.argv[5])
        topic = int(sys.argv[4])

        # read config file to get api-key, api-usr, and discourse url
        try:
            cfile = open("/etc/dc.yaml","r")
        except:
            print('xpub: couldn\'t open config file "/etc/dc.yaml"')
            print('xpub: exiting')
            sys.exit(4)
        config_data = load(cfile, Loader=Loader)
        cfile.close();

        # run the shell command to get the topic and retain the result
        proc = subprocess.Popen([
            'curl',
            '-X',
            'GET',
            '-H',
            'Api-Key: ' + config_data['api_key'],
            '-H',
            'Api-Username: ' + config_data['api_username'],
            '-H',
            'Content-Type: application/json',
            config_data['base_url'] + '/t/{'+str(topic)+'}.json'],
                                stdout=subprocess.PIPE
        )

        # read the result into a usable buffer
        output = proc.stdout.read()

        # convert the result to json
        try:
            topic_json = json.loads(output)
        except:
            print("topic " + str(topic) + " doesn't exist; exiting")
            sys.exit(4)


        # extract the post ID from the topic json
        post_id = topic_json['post_stream']['posts'][0]['id']
        category_id = topic_json['category_id']
        deleted_at = topic_json['deleted_at']
        if(deleted_at):
            print("post deleted: not pulled from discourse")
            sys.exit()
            
        # save the intermediate topic json to a file
        f2 = open("topic.json", "w")
        f2.write(str(topic_json))
        f2.close()
            
        # read the post using the api, retaining the return value
        proc2 = subprocess.Popen([
            'curl',
            '-X',
            'GET',
            '-H',
            'Api-Key: ' + config_data['api_key'],
            '-H',
            'Api-Username: ' + config_data['api_username'],
            '-H',
            'Content-Type: application/json',
            config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'],
                                 stdout=subprocess.PIPE
        )
            
        # copy the return value to a suitable buffer
        output2 = proc2.stdout.read()
            
        # convert the returned post to json
        post_json = json.loads(output2)
            
        # write the intermediate post json to a file
        f2 = open("post.json", "w")
        f2.write(str(post_json))
        f2.close()
                
        # extract the article markdown from the json output
        raw = post_json['raw']
            
        # write the article markdown to the specified file
        f = open(filename, "w")
        f.write(str(raw))
        f.close()

def pull_github_all():
    if(len(sys.argv) == 4):
        print("this will immediately pull the entire repo")
        value = input("is this what you intended? (y/n) ")
        if(value == "y"):
            response = subprocess.check_output([
                'git',
                'fetch']
            )
            response = subprocess.check_output([
                'git',
                'checkout',
                'origin/master',
                '--',
                '.']
            )
    elif(len(sys.argv > 4)):
        if(sys.argv[4] == "help"):
            print("xpub pull github all")
            print(" - this command has immediate effect")
            print(" - must be executed in local git repo directory")
        else:
            print('too many paramaeters: enter "xpub pull github all help" for hints')

def pull_github_file():
    if(len(sys.argv) < 5):
        print('xpub pull github file "<filename"')
    elif(sys.argv[4] == "help"):
        print('xpub pull github file "<filename"')
        print(' - does a git "fetch" and "checkout" on "<filename>"')
    else:
        filename = str(sys.argv[4])
        response = subprocess.check_output([
            'git',
            'fetch']
        )
        response = subprocess.check_output([
            'git',
            'checkout',
            'origin/master',
            '--',
            filename]
        )

def push_discourse_all():
    print("this will immediately push the entire directory to discourse")
    value = input("is this what you intended? (y/n) ")
    if(value != "y"):
        sys.exit()

    directory = "."
    topic = 0

    # read config file to get api-key, api-usr, and discourse url
    try:
        cfile = open("/etc/dc.yaml","r")
    except:
        print('xpub: couldn\'t open config file "/etc/dc.yaml"')
        print('xpub: exiting')
        sys.exit(4)
    config_data = load(cfile, Loader=Loader)
    cfile.close();
    
    for mdfilename in os.listdir(directory):

        # get the topic number from the filename
        if(mdfilename.endswith(".md")):
            flist = mdfilename.split('-')
            fl2 = flist[-1].split('.')
            if(fl2[0].isnumeric()):
                topic = int(fl2[0])
            else:
                continue
        else:
            continue

        filename = mdfilename
            
        # run the shell command to get the topic and retain the result
        proc = subprocess.Popen([
            'curl',
            '-X',
            'GET',
            '-H',
            'Api-Key: ' + config_data['api_key'],
            '-H',
            'Api-Username: ' + config_data['api_username'],
            '-H',
            'Content-Type: application/json',
            config_data['base_url'] + '/t/{'+str(topic)+'}.json'],
                                    stdout=subprocess.PIPE
        )
        
        # read the result into a usable buffer
        output = proc.stdout.read()
        
        # convert the result to json
        try:
            topic_json = json.loads(output)
        except:
            print("topic " + str(topic) + " doesn't exist; exiting")
            sys.exit(4)

        # extract the post ID from the topic json
        post_id = topic_json['post_stream']['posts'][0]['id']
        category_id = topic_json['category_id']
        deleted_at = topic_json['deleted_at']
        if(deleted_at):
            print("post deleted: not pushed from discourse")
            sys.exit()

        # load and convert the specified markdown file
        f = open(filename, "r")
        markdown = f.read()
        
        # pad the markdown to 9000 chars to avoid discourse bug
        outstr = markdown.ljust(9000)
        
        # create a dictionary buffer for the markdown
        data = {}
        
        # place the markdown against a key called "raw" discourse)
        data["raw"] = outstr
        
        # open a temporary json file to store the markdown as json
        f = open("foo.json", "w")
        
        # convert the markdown to json and store it in the temp file
        f.write(json.dumps(data))
        
        # close the temp file for completeness
        f.close()
        
        # set the url and auth data as read from the yaml config file
        url = config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'
        apikey = 'Api-Key: ' + config_data['api_key']
        apiusername = 'Api-Username: ' + config_data['api_username']
        
        # use the curl command to re-post the markdown into discourse
        response = subprocess.check_output([
            'curl',
            '-X',
            'PUT',
            url,
            '-H',
            apikey,
            '-H',
            apiusername,
            '-H',
            'Content-Type: application/json',
            '-d',
            '@foo.json']
        )
        
        # remove the temporary json file
        os.remove("foo.json")
    
def push_discourse_bulktag():
    if( len(sys.argv) < 5):
        print("xpub push discourse bulktag <tag> <tag> <tag>...")
        sys.exit()
    elif(sys.argv[4] == "help"):
        print("xpub push discourse bulktag <tag> <tag> <tag>...")
        print(" - pushes all markdown files in cwd to discourse")
        print(' - filenames must be like "<topic-slug>-topicnum.md"')
        print('   where "<topic-slug>" is the slugged title, and')
        print('   "topicnum" is the intended topic number')
        print(' - all untagged paragraphs are pushed')
        print(' - any paragraphs tagged with <tag>s are also pushed')
        print(' - paragraphs with non-matching tags are not pushed')
        sys.exit()

    directory = "."
    topic = 0
    tags = []
    for x in range(4, len(sys.argv)):
        tags.append(str(sys.argv[x]))

    # read config file to get api-key, api-usr, and discourse url
    try:
        cfile = open("/etc/dc.yaml","r")
    except:
        print('xpub: couldn\'t open config file "/etc/dc.yaml"')
        print('xpub: exiting')
        sys.exit(4)
    config_data = load(cfile, Loader=Loader)
    cfile.close();
        
    for mdfilename in os.listdir(directory):

        # get the topic number from the filename
        if(mdfilename.endswith(".md")):
            flist = mdfilename.split('-')
            fl2 = flist[-1].split('.')
            if(fl2[0].isnumeric()):
                topic = int(fl2[0])
            else:
                continue
        else:
            continue

        filename = mdfilename
            
        # switch in conditional sections based on tags
        if(tags):
            condfile = "cond_"+filename
            tag_count = len(tags)
            for x in range(tag_count):
                grepcli = 'grep -v "<!--[ ]*' + str(tags[x]) + '" '
                grepcli += filename + ' | grep -v '
                grepcli += '"' + str(tags[x]) + '[ ]*-->" > '
                grepcli += condfile
                os.system(grepcli)
                cpcli = "cp " + condfile + " tmp.md"
                os.system(cpcli)
                filename = "tmp.md"
    
            filename = "tmp.md"
            os.system("rm " + condfile)
        
        # run the shell command to get the topic and retain the result
        proc = subprocess.Popen([
            'curl',
            '-X',
            'GET',
            '-H',
            'Api-Key: ' + config_data['api_key'],
            '-H',
            'Api-Username: ' + config_data['api_username'],
            '-H',
            'Content-Type: application/json',
            config_data['base_url'] + '/t/{'+str(topic)+'}.json'],
                                stdout=subprocess.PIPE
        )
        
        # read the result into a usable buffer
        output = proc.stdout.read()
        
        # convert the result to json
        try:
            topic_json = json.loads(output)
        except:
            print("topic " + str(topic) + " doesn't exist; exiting")
            sys.exit(4)

        # extract the post ID from the topic json
        post_id = topic_json['post_stream']['posts'][0]['id']
        category_id = topic_json['category_id']
        deleted_at = topic_json['deleted_at']
        if(deleted_at):
            print("post deleted: not pushed from discourse")
            sys.exit()

        outfile_name = filename
    
        # load and convert the specified markdown file
        f = open(outfile_name, "r")
        markdown = f.read()
        
        # pad the markdown to 9000 chars to avoid discourse bug
        outstr = markdown.ljust(9000)
        
        # create a dictionary buffer for the markdown
        data = {}
        
        # place the markdown against a key called "raw" discourse)
        data["raw"] = outstr
        
        # open a temporary json file to store the markdown as json
        f = open("foo.json", "w")
        
        # convert the markdown to json and store it in the temp file
        f.write(json.dumps(data))
        
        # close the temp file for completeness
        f.close()
        
        # set the url and auth data as read from the yaml config file
        url = config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'
        apikey = 'Api-Key: ' + config_data['api_key']
        apiusername = 'Api-Username: ' + config_data['api_username']
    
        # use the curl command to re-post the markdown into discourse
        response = subprocess.check_output([
            'curl',
            '-X',
            'PUT',
            url,
            '-H',
            apikey,
            '-H',
            apiusername,
            '-H',
            'Content-Type: application/json',
            '-d',
            '@foo.json']
        )

        # remove the temporary json file
        os.remove("foo.json")
    
def helps():
    print('type a partial command sequence, followed by "help" for detailed help')
    print('type a partial command sequence by itself for hints')

fdict = {'help': helps,
         'push': push,
         'push discourse': push_discourse,
         'push discourse topic': push_discourse_topic,
         'push discourse new': push_discourse_new,
         'push discourse tagged': push_discourse_tagged,
         'push discourse all': push_discourse_all,
         'push discourse bulktag': push_discourse_bulktag,
         'push github': push_github,
         'push github all': push_github_all,
         'push github file': push_github_file,
         'pull': pull,
         'pull discourse': pull_discourse,
         'pull discourse topic': pull_discourse_topic,
         'pull discourse category': pull_discourse_category,
         'pull discourse range': pull_discourse_range,
         'pull github': pull_github,
         'pull github all': pull_github_all,
         'pull github file': pull_github_file,
         'convert': convert,
         'convert markdown': convert_markdown,
         'convert markdown html': convert_markdown_html,
         'convert discourse': convert_discourse,
         'convert discourse html': convert_discourse_html,
         'convert discourse bulk': convert_discourse_bulk,
         'convert discourse help': convert_discourse_help,
         'convert markdown help': convert_markdown_help,
         'push help': push_help,
         'pull help': pull_help,
         'pull discourse help': pull_discourse_help,
         'push discourse help': push_discourse_help
}

keystring = ""

for x in range(1, len(sys.argv)):
    if(x > 1):
        keystring += " "
    keystring += sys.argv[x]
    if(x == 3):
        break

try:
    fn = fdict[keystring]
except:
    fn = helps

if( len(sys.argv) == 1):
    fn = xpub

fn()


