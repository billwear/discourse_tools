#!/usr/bin/python3

import argparse
import sys, subprocess, json, os, time
from yaml import load, dump      
try:                             
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper

def push():
    print("xpub push (discourse | github)")

def push_discourse():
    print("xpub push discourse (topic | new | tagged | all | bulktag)")

def push_github():
    print("xpub push github (all | file)")

def pull():
    print("xpub pull (discourse | github)")

def pull_discourse():
    print("xpub pull discourse (topic | range | category)")

def pull_github():
    print("xpub pull github (all | file)")

def xpub():
    print("xpub (pull | push)")

def push_discourse_tagged():
    if(len(sys.argv) < 8):
        print('xpub push discourse tagged topic <number> "<filename>" <tag> <tag> <tag>...')
    else: 
        topic = sys.argv[5]
        filename = sys.argv[6]
        tags = []
        for x in range(7, len(sys.argv)):
            tags.append(str(sys.argv[x]))
        
        # read config file to get api-key, api-usr, and discourse url
        try:
            cfile = open("/etc/dc.yaml","r")
        except:
            print('xpub: unable to find config file "/etc/dc.yaml"')
            print('xpub: exiting')
            sys.exit(4)
        config_data = load(cfile, Loader=Loader)
        cfile.close();
        
        # run the shell command to get the topic and retain the result
        proc = subprocess.Popen([
            'curl',
            '-X',
            'GET',
            '-H',
            'Api-Key: ' + config_data['api_key'],
            '-H',
            'Api-Username: ' + config_data['api_username'],
            '-H',
            'Content-Type: application/json',
            config_data['base_url'] + '/t/{'+str(topic)+'}.json'],
                                stdout=subprocess.PIPE
        )

        # read the result into a usable buffer
        output = proc.stdout.read()

        # convert the result to json
        try:
            topic_json = json.loads(output)
        except:
            print("topic " + str(topic) + " doesn't exist; exiting")
            sys.exit(4)

        # extract the post ID from the topic json
        post_id = topic_json['post_stream']['posts'][0]['id']
        category_id = topic_json['category_id']
        deleted_at = topic_json['deleted_at']
        if(deleted_at and args.nodeleted):
            print("post deleted: not pushed from discourse")
            sys.exit()

        # switch in conditional sections based on tags
        if(tags):
            condfile = "cond_"+filename
            tag_count = len(tags)
            for x in range(tag_count):
                grepcli = 'grep -v "<!--[ ]*' + str(tags[x]) + '" '
                grepcli += filename + ' | grep -v '
                grepcli += '"' + str(tags[x]) + '[ ]*-->" >'
                grepcli += condfile
                os.system(grepcli)
                cpcli = "cp " + condfile + " tmp.md"
                os.system(cpcli)
                filename = "tmp.md"
                
            os.system("rm " + condfile)
            
        # load and convert the specified markdown file
        f = open(filename, "r")
        markdown = f.read()
        f.close()
        os.system("rm " + filename)

        # pad the markdown to 9000 chars to avoid discourse bug
        outstr = markdown.ljust(9000)
        
        # create a dictionary buffer for the markdown
        data = {}
        
        # place the markdown against a key called "raw" (the json key reqd by discourse)
        data["raw"] = outstr
        
        # open a temporary json file to store the markdown as json
        f = open("foo.json", "w")
        
        # convert the markdown to json and store it in the temp file
        f.write(json.dumps(data))
        
        # close the temp file for completeness
        f.close()
        
        # set the url and auth data as read from the yaml config file
        url = config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'
        apikey = 'Api-Key: ' + config_data['api_key']
        apiusername = 'Api-Username: ' + config_data['api_username']
    
        # use the curl command to re-post the markdown into discourse
        response = subprocess.check_output([
            'curl',
            '-X',
            'PUT',
            url,
            '-H',
            apikey,
            '-H',
            apiusername,
            '-H',
            'Content-Type: application/json',
            '-d',
            '@foo.json']
        )

        # remove the temporary json file
        os.remove("foo.json")

def push_discourse_topic():
    if(len(sys.argv) < 6):
        print('xpub push discourse topic <number> "<filename>"')
    else: 
        topic = sys.argv[4]
        filename = sys.argv[5]
        
        # read config file to get api-key, api-usr, and discourse url
        try:
            cfile = open("/etc/dc.yaml","r")
        except:
            print('xpub: unable to find config file "/etc/dc.yaml"')
            print('xpub: exiting')
            sys.exit(4)
        config_data = load(cfile, Loader=Loader)
        cfile.close();
        
        # run the shell command to get the topic and retain the result
        proc = subprocess.Popen([
            'curl',
            '-X',
            'GET',
            '-H',
            'Api-Key: ' + config_data['api_key'],
            '-H',
            'Api-Username: ' + config_data['api_username'],
            '-H',
            'Content-Type: application/json',
            config_data['base_url'] + '/t/{'+str(topic)+'}.json'],
                                stdout=subprocess.PIPE
        )

        # read the result into a usable buffer
        output = proc.stdout.read()

        # convert the result to json
        try:
            topic_json = json.loads(output)
        except:
            print("topic " + str(topic) + " doesn't exist; exiting")
            sys.exit(4)

        # extract the post ID from the topic json
        post_id = topic_json['post_stream']['posts'][0]['id']
        category_id = topic_json['category_id']
        deleted_at = topic_json['deleted_at']
        if(deleted_at and args.nodeleted):
            print("post deleted: not pushed from discourse")
            sys.exit()

        # load and convert the specified markdown file
        f = open(filename, "r")
        markdown = f.read()

        # pad the markdown to 9000 chars to avoid discourse bug
        outstr = markdown.ljust(9000)
        
        # create a dictionary buffer for the markdown
        data = {}
        
        # place the markdown against a key called "raw" (the json key reqd by discourse)
        data["raw"] = outstr
        
        # open a temporary json file to store the markdown as json
        f = open("foo.json", "w")
        
        # convert the markdown to json and store it in the temp file
        f.write(json.dumps(data))
        
        # close the temp file for completeness
        f.close()
        
        # set the url and auth data as read from the yaml config file
        url = config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'
        apikey = 'Api-Key: ' + config_data['api_key']
        apiusername = 'Api-Username: ' + config_data['api_username']
    
        # use the curl command to re-post the markdown into discourse
        response = subprocess.check_output([
            'curl',
            '-X',
            'PUT',
            url,
            '-H',
            apikey,
            '-H',
            apiusername,
            '-H',
            'Content-Type: application/json',
            '-d',
            '@foo.json']
        )

        # remove the temporary json file
        os.remove("foo.json")

def push_discourse_new():
    if(len(sys.argv) < 8):
        print('xpub push discourse new category <number> "<title>" "<filename>"')
    else:

        filename = str(sys.argv[7])
        title = str(sys.argv[6])
        categoryid = int(sys.argv[5])

        # read config file to get api-key, api-usr, and discourse url
        try:
            cfile = open("/etc/dc.yaml","r")
        except:
            print('xpub: cannot open "/etc/dc.yaml"')
            print('xpub: exiting')
            sys.exit(4)
            
        config_data = load(cfile, Loader=Loader)
        cfile.close();

        # load and convert the specified markdown file
        f = open(filename, "r")
        markdown = f.read()
                
        # pad the markdown to 9000 chars to avoid discourse bug
        outstr = markdown.ljust(9000)
        
        # create a dictionary buffer for the markdown
        data = {}
        
        # place the markdown in the appropriate json keys
        data["title"] = title
        data["category"] = categoryid
        data["raw"] = outstr
        
        # open a temporary json file to store the markdown as json
        f = open("foo.json", "w")
        
        # convert the markdown to json and store it in the temp file
        f.write(json.dumps(data))
        
        # close the temp file for completeness
        f.close()
        
        # set the url and auth data as read from the yaml config file
        url = config_data['base_url'] + '/posts.json'
        apikey = 'Api-Key: ' + config_data['api_key']
        apiusername = 'Api-Username: ' + config_data['api_username']
    
        # use the curl command to re-post the markdown into discourse
        response = subprocess.check_output([
            'curl',
            '-X',
            'POST',
            url,
            '-H',
            apikey,
            '-H',
            apiusername,
            '-H',
            'Content-Type: application/json',
            '-d',
            '@foo.json']
        )

        # remove the temporary files
        os.remove("foo.json")

def push_github_all():
        response = subprocess.check_output([
            'git',
            'add',
            '.']
        )
        try:
            response = subprocess.check_output([
                'git',
                'commit',
                '-m',
                'bot-push']
            )
        except:
            print("up to date")
            sys.exit()
        response = subprocess.check_output([
            'git',
            'push']
        )            

def pull_discourse_range():
    if(len(sys.argv) < 6):
        print("xpub pull discourse range <low> <high>")
    else:
        start = int(sys.argv[4])
        end = int(sys.argv[5])
        
        # read config file to get api-key, api-usr, and discourse url
        try:
            cfile = open("/etc/dc.yaml","r")
        except:
            print('xpub: unable to find config file "/etc/dc.yaml"')
            print('xpub: exiting')
            sys.exit(4)
        config_data = load(cfile, Loader=Loader)
        cfile.close();
        
        # giant for loop to get the topic range specified
        for tn in range( start, end+1 ):
            
            # sleep for 2.5 seconds - prevents discourse DDOS rejection
            time.sleep(2.5)
            
            # run the shell command to get the topic and retain the result
            proc = subprocess.Popen([
                'curl',
                '-X',
                'GET',
                '-H',
                'Api-Key: ' + config_data['api_key'],
                '-H',
                'Api-Username: ' + config_data['api_username'],
                '-H',
                'Content-Type: application/json',
                config_data['base_url'] + '/t/{'+str(tn)+'}.json'],
                                    stdout=subprocess.PIPE
            )
            
            # read the result into a usable buffer
            output = proc.stdout.read()
            
            # debug output: what topic were you pulling?
            print("topic = " + str(tn))
                
            # convert the result to json
            try:
                topic_json = json.loads(output)
            except:
                continue
            
            # extract the post ID from the topic json
            post_id = topic_json['post_stream']['posts'][0]['id']
            autoname = topic_json['post_stream']['posts'][0]['topic_slug'] + \
                '-' + str(tn) + '.md'
            deleted_at = topic_json['deleted_at']
            if(deleted_at and args.nodeleted):
                print("post deleted: not pulled from discourse")
                continue
                
            # read the post using the api, retaining the return value
            proc2 = subprocess.Popen([
                'curl',
                '-X',
                'GET',
                '-H',
                'Api-Key: ' + config_data['api_key'],
                '-H',
                'Api-Username: ' + config_data['api_username'],
                '-H',
                'Content-Type: application/json',
                config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'],
                                     stdout=subprocess.PIPE
            )
                
            # copy the return value to a suitable buffer
            output2 = proc2.stdout.read()
            
            # convert the returned post to json
            post_json = json.loads(output2)

            # extract the article markdown from the json output
            raw = post_json['raw']
            
            # write the article markdown to the specified file
            f = open(autoname, "w")
            f.write(str(raw))
            f.close()
                
        # exit now, as this run is finished
        sys.exit(0)
        
def push_github_file():
    if(len(sys.argv) < 5):
        print('xpub push github file "<filename>"')
    else:
        filename = str(sys.argv[4])
        response = subprocess.check_output([
            'git',
            'add',
            filename]
        )
        try:
            response = subprocess.check_output([
                'git',
                'commit',
                '-m',
                'bot-push']
            )
        except:
            print("up to date")
            sys.exit()

        response = subprocess.check_output([
            'git',
            'push']
        )

def pull_discourse_category():
    if(len(sys.argv) < 5):
        print("xpub pull discourse category <number> range <low> <high>")
    else:
        start = int(sys.argv[6])
        end = int(sys.argv[7])
        categoryid = int(sys.argv[4])
        
        # read config file to get api-key, api-usr, and discourse url
        try:
            cfile = open("/etc/dc.yaml","r")
        except:
            print('xpub: unable to find config file "/etc/dc.yaml"')
            print('xpub: exiting')
            sys.exit(4)
        config_data = load(cfile, Loader=Loader)
        cfile.close();
        
        # giant for loop to get the topic range specified
        for tn in range( start, end+1 ):
            
            # sleep for 2.5 seconds - prevents discourse DDOS rejection
            time.sleep(2.5)
            
            # run the shell command to get the topic and retain the result
            proc = subprocess.Popen([
                'curl',
                '-X',
                'GET',
                '-H',
                'Api-Key: ' + config_data['api_key'],
                '-H',
                'Api-Username: ' + config_data['api_username'],
                '-H',
                'Content-Type: application/json',
                config_data['base_url'] + '/t/{'+str(tn)+'}.json'],
                                    stdout=subprocess.PIPE
            )
            
            # read the result into a usable buffer
            output = proc.stdout.read()
            
            # debug output: what topic were you pulling?
            print("topic = " + str(tn))
                
            # convert the result to json
            try:
                topic_json = json.loads(output)
            except:
                continue
            
            # extract the post ID from the topic json
            post_id = topic_json['post_stream']['posts'][0]['id']
            category_id = topic_json['category_id']
            if((category_id is None) or (categoryid != int(category_id))):
               continue
            autoname = topic_json['post_stream']['posts'][0]['topic_slug'] + \
                '-' + str(tn) + '.md'
            deleted_at = topic_json['deleted_at']
            if(deleted_at and args.nodeleted):
                print("post deleted: not pulled from discourse")
                continue
                
            # read the post using the api, retaining the return value
            proc2 = subprocess.Popen([
                'curl',
                '-X',
                'GET',
                '-H',
                'Api-Key: ' + config_data['api_key'],
                '-H',
                'Api-Username: ' + config_data['api_username'],
                '-H',
                'Content-Type: application/json',
                config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'],
                                     stdout=subprocess.PIPE
            )
                
            # copy the return value to a suitable buffer
            output2 = proc2.stdout.read()
            
            # convert the returned post to json
            post_json = json.loads(output2)

            # extract the article markdown from the json output
            raw = post_json['raw']
            
            # write the article markdown to the specified file
            f = open(autoname, "w")
            f.write(str(raw))
            f.close()
                
        # exit now, as this run is finished
        sys.exit(0)

def pull_discourse_topic():
    if(len(sys.argv) < 6):
        print('xpub pull discourse topic <number> "<filename>"')
    else:
        filename = str(sys.argv[5])
        topic = int(sys.argv[4])

        # read config file to get api-key, api-usr, and discourse url
        try:
            cfile = open("/etc/dc.yaml","r")
        except:
            print('xpub: couldn\'t open config file "/etc/dc.yaml"')
            print('xpub: exiting')
            sys.exit(4)
        config_data = load(cfile, Loader=Loader)
        cfile.close();

        # run the shell command to get the topic and retain the result
        proc = subprocess.Popen([
            'curl',
            '-X',
            'GET',
            '-H',
            'Api-Key: ' + config_data['api_key'],
            '-H',
            'Api-Username: ' + config_data['api_username'],
            '-H',
            'Content-Type: application/json',
            config_data['base_url'] + '/t/{'+str(topic)+'}.json'],
                                stdout=subprocess.PIPE
        )

        # read the result into a usable buffer
        output = proc.stdout.read()

        # convert the result to json
        try:
            topic_json = json.loads(output)
        except:
            print("topic " + str(topic) + " doesn't exist; exiting")
            sys.exit(4)


        # extract the post ID from the topic json
        post_id = topic_json['post_stream']['posts'][0]['id']
        category_id = topic_json['category_id']
        deleted_at = topic_json['deleted_at']
        if(deleted_at and args.nodeleted):
            print("post deleted: not pulled from discourse")
            sys.exit()
            
        # save the intermediate topic json to a file
        f2 = open("topic.json", "w")
        f2.write(str(topic_json))
        f2.close()
            
        # read the post using the api, retaining the return value
        proc2 = subprocess.Popen([
            'curl',
            '-X',
            'GET',
            '-H',
            'Api-Key: ' + config_data['api_key'],
            '-H',
            'Api-Username: ' + config_data['api_username'],
            '-H',
            'Content-Type: application/json',
            config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'],
                                 stdout=subprocess.PIPE
        )
            
        # copy the return value to a suitable buffer
        output2 = proc2.stdout.read()
            
        # convert the returned post to json
        post_json = json.loads(output2)
            
        # write the intermediate post json to a file
        f2 = open("post.json", "w")
        f2.write(str(post_json))
        f2.close()
                
        # extract the article markdown from the json output
        raw = post_json['raw']
            
        # write the article markdown to the specified file
        f = open(filename, "w")
        f.write(str(raw))
        f.close()

def pull_github_all():
        response = subprocess.check_output([
            'git',
            'fetch']
        )
        response = subprocess.check_output([
            'git',
            'checkout',
            'origin/master',
            '--',
            '.']
        )

def pull_github_file():
    if(len(sys.argv) < 5):
        print('xpub pull github file "<filename"')
    else:
        filename = str(sys.argv[4])
        response = subprocess.check_output([
            'git',
            'fetch']
        )
        response = subprocess.check_output([
            'git',
            'checkout',
            'origin/master',
            '--',
            filename]
        )

def push_discourse_all():

    directory = "."
    topic = 0

    # read config file to get api-key, api-usr, and discourse url
    try:
        cfile = open("/etc/dc.yaml","r")
    except:
        print('xpub: couldn\'t open config file "/etc/dc.yaml"')
        print('xpub: exiting')
        sys.exit(4)
    config_data = load(cfile, Loader=Loader)
    cfile.close();
    
    for mdfilename in os.listdir(directory):

        # get the topic number from the filename
        if(mdfilename.endswith(".md")):
            flist = mdfilename.split('-')
            fl2 = flist[-1].split('.')
            if(fl2[0].isnumeric()):
                topic = int(fl2[0])
            else:
                continue
        else:
            continue

        filename = mdfilename
            
        # run the shell command to get the topic and retain the result
        proc = subprocess.Popen([
            'curl',
            '-X',
            'GET',
            '-H',
            'Api-Key: ' + config_data['api_key'],
            '-H',
            'Api-Username: ' + config_data['api_username'],
            '-H',
            'Content-Type: application/json',
            config_data['base_url'] + '/t/{'+str(topic)+'}.json'],
                                    stdout=subprocess.PIPE
        )
        
        # read the result into a usable buffer
        output = proc.stdout.read()
        
        # convert the result to json
        try:
            topic_json = json.loads(output)
        except:
            print("topic " + str(topic) + " doesn't exist; exiting")
            sys.exit(4)

        # extract the post ID from the topic json
        post_id = topic_json['post_stream']['posts'][0]['id']
        category_id = topic_json['category_id']
        deleted_at = topic_json['deleted_at']
        if(deleted_at and args.nodeleted):
            print("post deleted: not pushed from discourse")
            sys.exit()

        # load and convert the specified markdown file
        f = open(filename, "r")
        markdown = f.read()
        
        # pad the markdown to 9000 chars to avoid discourse bug
        outstr = markdown.ljust(9000)
        
        # create a dictionary buffer for the markdown
        data = {}
        
        # place the markdown against a key called "raw" discourse)
        data["raw"] = outstr
        
        # open a temporary json file to store the markdown as json
        f = open("foo.json", "w")
        
        # convert the markdown to json and store it in the temp file
        f.write(json.dumps(data))
        
        # close the temp file for completeness
        f.close()
        
        # set the url and auth data as read from the yaml config file
        url = config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'
        apikey = 'Api-Key: ' + config_data['api_key']
        apiusername = 'Api-Username: ' + config_data['api_username']
        
        # use the curl command to re-post the markdown into discourse
        response = subprocess.check_output([
            'curl',
            '-X',
            'PUT',
            url,
            '-H',
            apikey,
            '-H',
            apiusername,
            '-H',
            'Content-Type: application/json',
            '-d',
            '@foo.json']
        )
        
        # remove the temporary json file
        os.remove("foo.json")
    
def push_discourse_bulktag():
    if( len(sys.argv) < 5):
        print("xpub push discourse bulktag <tag> <tag> <tag>...")
        sys.exit()

    directory = "."
    topic = 0
    tags = []
    for x in range(4, len(sys.argv)):
        tags.append(str(sys.argv[x]))

    # read config file to get api-key, api-usr, and discourse url
    try:
        cfile = open("/etc/dc.yaml","r")
    except:
        print('xpub: couldn\'t open config file "/etc/dc.yaml"')
        print('xpub: exiting')
        sys.exit(4)
    config_data = load(cfile, Loader=Loader)
    cfile.close();
        
    for mdfilename in os.listdir(directory):

        # get the topic number from the filename
        if(mdfilename.endswith(".md")):
            flist = mdfilename.split('-')
            fl2 = flist[-1].split('.')
            if(fl2[0].isnumeric()):
                topic = int(fl2[0])
            else:
                continue
        else:
            continue

        filename = mdfilename
            
        # switch in conditional sections based on tags
        if(tags):
            condfile = "cond_"+filename
            tag_count = len(tags)
            for x in range(tag_count):
                grepcli = 'grep -v "<!--[ ]*' + str(tags[x]) + '" '
                grepcli += filename + ' | grep -v '
                grepcli += '"' + str(tags[x]) + '[ ]*-->" > '
                grepcli += condfile
                os.system(grepcli)
                cpcli = "cp " + condfile + " tmp.md"
                os.system(cpcli)
                filename = "tmp.md"
    
            filename = "tmp.md"
            os.system("rm " + condfile)
        
        # run the shell command to get the topic and retain the result
        proc = subprocess.Popen([
            'curl',
            '-X',
            'GET',
            '-H',
            'Api-Key: ' + config_data['api_key'],
            '-H',
            'Api-Username: ' + config_data['api_username'],
            '-H',
            'Content-Type: application/json',
            config_data['base_url'] + '/t/{'+str(topic)+'}.json'],
                                stdout=subprocess.PIPE
        )
        
        # read the result into a usable buffer
        output = proc.stdout.read()
        
        # convert the result to json
        try:
            topic_json = json.loads(output)
        except:
            print("topic " + str(topic) + " doesn't exist; exiting")
            sys.exit(4)

        # extract the post ID from the topic json
        post_id = topic_json['post_stream']['posts'][0]['id']
        category_id = topic_json['category_id']
        deleted_at = topic_json['deleted_at']
        if(deleted_at and args.nodeleted):
            print("post deleted: not pushed from discourse")
            sys.exit()

        outfile_name = filename
    
        # load and convert the specified markdown file
        f = open(outfile_name, "r")
        markdown = f.read()
        
        # pad the markdown to 9000 chars to avoid discourse bug
        outstr = markdown.ljust(9000)
        
        # create a dictionary buffer for the markdown
        data = {}
        
        # place the markdown against a key called "raw" discourse)
        data["raw"] = outstr
        
        # open a temporary json file to store the markdown as json
        f = open("foo.json", "w")
        
        # convert the markdown to json and store it in the temp file
        f.write(json.dumps(data))
        
        # close the temp file for completeness
        f.close()
        
        # set the url and auth data as read from the yaml config file
        url = config_data['base_url'] + '/posts/{'+str(post_id)+'}.json'
        apikey = 'Api-Key: ' + config_data['api_key']
        apiusername = 'Api-Username: ' + config_data['api_username']
    
        # use the curl command to re-post the markdown into discourse
        response = subprocess.check_output([
            'curl',
            '-X',
            'PUT',
            url,
            '-H',
            apikey,
            '-H',
            apiusername,
            '-H',
            'Content-Type: application/json',
            '-d',
            '@foo.json']
        )

        # remove the temporary json file
        os.remove("foo.json")
    
def helps():
    print("this is where help goes")

fdict = {'help': helps,
         'push': push,
         'push discourse': push_discourse,
         'push discourse topic': push_discourse_topic,
         'push discourse new': push_discourse_new,
         'push discourse tagged': push_discourse_tagged,
         'push discourse all': push_discourse_all,
         'push discourse bulktag': push_discourse_bulktag,
         'push github': push_github,
         'push github all': push_github_all,
         'push github file': push_github_file,
         'pull': pull,
         'pull discourse': pull_discourse,
         'pull discourse topic': pull_discourse_topic,
         'pull discourse category': pull_discourse_category,
         'pull discourse range': pull_discourse_range,
         'pull github': pull_github,
         'pull github all': pull_github_all,
         'pull github file': pull_github_file}

keystring = ""

for x in range(1, len(sys.argv)):
    if(x > 1):
        keystring += " "
    keystring += sys.argv[x]
    if(x == 3):
        break

try:
    fn = fdict[keystring]
except:
    fn = helps

if( len(sys.argv) == 1):
    fn = xpub

fn()


